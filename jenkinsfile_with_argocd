pipeline {
    agent any

   tools{
       maven 'maven3'  
   }

    stages {
       
        stage('git checkout') {
            steps {
                echo 'Cloning GIT HUB Repo '
				git branch: 'main', url: 'https://github.com/ranjireddy041/mindcircuit14.git'
            }  
        }
		
		
	    stage('sonar scan') {
            steps {
                echo 'scanning project'
                sh 'ls -ltrh'
                
                sh ''' mvn sonar:sonar \\
                      -Dsonar.host.url=http://http://3.91.69.66/:9000 \\
                      -Dsonar.login=squ_34b6fb4c23dac3a6ed31a6db7859ed33856ef74a'''
            }
    	}
		
        stage('Build Artifact') {
            steps {
                echo 'Build Artifact'
				sh 'mvn clean package'
            }
        }
		
        stage('Docker Image') {
            steps {
                echo 'Docker Image'
				sh 'docker build -t ranjidokcerhub/devopsrepo:${BUILD_NUMBER} -f Dockerfile .'
            }
        }
		
		
	
		
        stage('Push to Dockerhub') {
            steps {
			 script {
			withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhub')]) {
			
            sh 'docker login -u ranjidokcerhub -p ${dockerhub}'
			
			 }
			   sh 'docker push ranjidokcerhub/devopsrepo:${BUILD_NUMBER}'
			   
                echo 'Pushed to Dockerhub'
				}
				
            }
        }
        
      
        stage('Update Deployment File') {
		
		 environment {
            GIT_REPO_NAME = "mindcircuit14"
            GIT_USER_NAME = "ranjireddy041"
        }
		
            steps {
                echo 'Update Deployment File'
				withCredentials([string(credentialsId: 'githubtoken', variable: 'githubtoken')]) 
				{
                  sh '''
                    git config user.email "ranjiredd@gmail.com"
                    git config user.name "ranji"
                    BUILD_NUMBER=${BUILD_NUMBER}
			sed -i "s/devopsrepo:.*/devopsrepo:${BUILD_NUMBER}/g" deploymentfiles/deployment.yml
                    git add .
                    
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"

                    git push https://${githubtoken}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
				  
                 }
				
            }
        }		
		

    }
		post {
    always {
        script {
            if (currentBuild.result == 'SUCCESS') {
                echo "Build #${env.BUILD_NUMBER} of ${env.JOB_NAME} succeeded."
            }
    			else (currentBuild.result == 'FAILURE') {
                echo "Build #${env.BUILD_NUMBER} of ${env.JOB_NAME} failed."
            } 
        }
    }
}
	
}




        
